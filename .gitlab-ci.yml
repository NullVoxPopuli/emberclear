stages:
  - setup
  - quality
  - test
  - build
  - analyze
  - deploy

# NOTE: reinstalling is faster than cache...
# cache:
#   # untracked: true
#   key: ${CI_COMMIT_REF_SLUG}
#   paths:
#     - ${CI_PROJECT_DIR}/.cache_yarn
#     - ${CI_PROJECT_DIR}/packages/frontend/node_modules

# need an image that has chrome, and eventually firefox
image: danlynn/ember-cli:latest

variables:
  YARN_CACHE_FOLDER: ${CI_PROJECT_DIR}/.cache_yarn
  DOCKER_DRIVER: overlay2
  NETLIFY_CLI_VERSION: 0.4.0
  NODE_OPTIONS: --max-old-space-size=2048
  PERCY_ENABLE: 0
  CI_BROWSER: chrome
  FRONTEND: ${CI_PROJECT_DIR}/packages/frontend


# TODO: HACK: for now, it's faster to install everything
#       than it is to rely on gitlab's slow cache
before_script:
  - time ( cd ${FRONTEND} && yarn install )

Security:
  stage: setup
  # only:
  #   changes:
  #     - ${FRONTEND}/**/*
  script:
    - time npm install -g snyk
    - time ( cd ${FRONTEND} && snyk test --severity-threshold=high )


Lint JS/TS:
  stage: quality
  dependencies: [ Security ]
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  script: time ( cd ${FRONTEND} && yarn lint:js )

Lint Templates:
  stage: quality
  dependencies: [ Security ]
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  script: time ( cd ${FRONTEND} && yarn lint:hbs )

Lint SCSS:
  stage: quality
  dependencies: [ Security ]
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  script: time ( cd ${FRONTEND} && yarn lint:sass )

Check Types:
  allow_failure: true
  stage: quality
  dependencies: [ Security ]
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  script: time ( cd ${FRONTEND} && yarn tsc )

Translations:
  stage: quality
  dependencies: [ Security ]
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  script: time ( cd ${FRONTEND} && yarn lint:i18n )


Unit Tests:
  stage: test
  dependencies: [ Security ]
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  script:
    - time ./run yarn test:named Unit
  artifacts:
    paths:
      - ${FRONTEND}/coverage*
      - ${FRONTEND}/junit.xml
    reports:
      junit: ${FRONTEND}/junit.xml

Helper Tests:
  stage: test
  dependencies: [ Security ]
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  script:
    - time ./run yarn test:named Helper
  artifacts:
    paths:
      - ${FRONTEND}/coverage*
      - ${FRONTEND}/junit.xml
    reports:
      junit: ${FRONTEND}/junit.xml

Integration Tests:
  stage: test
  dependencies: [ Security ]
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  script:
    - time ./run yarn test:named Integration
  artifacts:
    paths:
      - ${FRONTEND}/coverage*
      - ${FRONTEND}/junit.xml
    reports:
      junit: ${FRONTEND}/junit.xml

Application Tests:
  stage: test
  dependencies: [ Security ]
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  script:
    - PERCY_ENABLE=1 ./run yarn test:named Acceptance
  artifacts:
    paths:
      - ${FRONTEND}/coverage*
      - ${FRONTEND}/junit.xml
    reports:
      junit: ${FRONTEND}/junit.xml

Application Tests (a11y):
  stage: test
  dependencies: [ Security ]
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  # for now -- this is a big task
  allow_failure: true
  script:
    - PERCY_ENABLE=0 ./run yarn test:named Acceptance --query enableA11yAudit=true
  artifacts:
    paths:
      - ${FRONTEND}/junit.xml
    reports:
      junit: ${FRONTEND}/junit.xml

Merge Coverage:
  stage: build
  dependencies:
    # - All Tests
    - Application Tests
    - Application Tests (a11y)
    - Integration Tests
    - Helper Tests
    - Unit Tests
  # only:
  #   changes: [ '${FRONTEND}/**/*' ]
  script:
    - time ./run yarn merge-coverage
    - cat ${FRONTEND}/coverage/coverage-summary.json
  artifacts:
    paths:
      - ${FRONTEND}/coverage*

Build Production:
  stage: build
  only:
    refs: [ master ]
    # changes: [ '${FRONTEND}/**/*' ]
  script:
    - time ./run yarn build:production
  artifacts:
    paths:
      - ${FRONTEND}/dist

Analyze Bundle:
  stage: build
  only:
    refs: [ master ]
    # changes: [ '${FRONTEND}/**/*' ]
  script:
    - time ./run yarn analyze
  artifacts:
    paths:
      - ${FRONTEND}/public/bundle.html

Deploy Production:
  stage: deploy
  only:
    refs: [ master ]
    # changes: [ '${FRONTEND}/**/*' ]
  dependencies:
    - Merge Coverage
    - Analyze Bundle
    - Build Production
  before_script: [ ]
  script:
    - mv ${FRONTEND}/coverage public/
    - cp ${FRONTEND}/public/bundle.html ${CI_PROJECT_DIR}/packages/frontend/dist/bundle.html
    - cp ${FRONTEND}/public/bundle.html public/bundle.html
    - time ./scripts/publish

Deploy Docker Image:
  stage: deploy
  only:
    refs: [ master ]
    # changes: [ '${FRONTEND}/**/*' ]
  image: docker
  services:
   - docker:dind
  variables:
    DOCKER_HOST: tcp://docker:2375/
    DOCKER_DRIVER: overlay2
  dependencies:
   - Build Production
   - Merge Coverage
   - Analyze Bundle
  before_script: [ ]
  script:
    - ls -la ./scripts
    - time sh ./scripts/dockerhub

pages:
  stage: deploy
  only:
    refs: [ master ]
    # changes: [ '${FRONTEND}/**/*' ]
  dependencies:
    - Merge Coverage
    - Analyze Bundle
  before_script: [ ]
  script:
    - mkdir -p public/$CI_COMMIT_REF_NAME
    - mv ${FRONTEND}/coverage public/$CI_COMMIT_REF_NAME
    - mv ${FRONTEND}/public/bundle.html public/$CI_COMMIT_REF_NAME
  artifacts:
    paths:
      - public
    expire_in: 30 days

